(function(dependencies, global) {
    var cache = [];

    function require(index) {
        var module = cache[index],
            callback, exports;

        if (module === undefined) {
            callback = dependencies[index];
            exports = {};

            cache[index] = module = {
                exports: exports,
                require: require
            };

            callback.call(exports, require, exports, module, global);
        }

        return module.exports;
    }

    require.resolve = function(path) {
        return path;
    };

    if (typeof(define) === "function" && define.amd) {
        define([], function() {
            return require(0);
        });
    } else if (typeof(module) !== "undefined" && module.exports) {
        module.exports = require(0);
    } else {

        require(0);

    }
}([
    function(require, exports, module, global) {

        var requestProgress = require(1);


        requestProgress.attachToGlobal();


        var div = document.getElementById("progress");


        requestProgress.on("start", function() {
            console.log("start");
        });
        requestProgress.on("end", function() {
            div.style.width = "0%";
            console.log("end");
        });
        requestProgress.on("update", function(percent) {
            div.style.width = (percent * 100) + "%";
        });


        function makeRequest() {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "http://localhost:3000", true);
            xhr.send();
        }


        function request() {
            var count = 0;

            (function doit() {
                makeRequest();

                count++;
                if (count !== 5) {
                    doit();
                }
            }());
        }

        request();

        global.request = request;


    },
    function(require, exports, module, global) {

        var time = require(2),
            isFunction = require(5),
            EventEmitter = require(6),
            XMLHttpRequestPolyfill = require(17),
            requestAnimationFrame = require(19);


        var requestProgress = module.exports = new EventEmitter(),

            currentState = 0,
            previousState = 0,
            nextState = 0,

            startTime = 0,
            frameTime = 0,
            frameCount = 0,
            frameDelta = 0,

            currentDelta = 0,
            previousDelta = 0,

            started = false,
            ended = true,

            totalRequests = 0,
            completedRequests = 0,

            requestId = null;


        function lerp(a, b, t) {
            return a + (b - a) * t;
        }

        function clamp01(x) {
            return x > 1 ? 1 : (x < 0 ? 0 : x);
        }

        function requestStart() {
            if (started === false) {
                started = true;
                ended = false;
                currentDelta = 0;
                requestProgress.emit("start");
            }
            startTime = time.now();
            totalRequests += 1;
        }

        function requestDone() {
            completedRequests += 1;
            setProgress(completedRequests / totalRequests, time.now() - startTime);
        }

        function setProgress(value, delta) {
            previousState = nextState;
            nextState = value;

            previousDelta = currentDelta;
            currentDelta = delta;

            frameDelta = delta - previousDelta;
            frameTime = time.now();
            frameCount = 0;

            requestAnimationFrame.cancel(requestId);
            requestId = requestAnimationFrame(increment);
        }

        function increment(ms) {
            var last = frameTime,
                dt = ms - last;

            frameTime = ms;
            frameCount += dt;

            currentState = lerp(previousState, nextState, clamp01(frameCount / frameDelta));
            requestProgress.emit("update", currentState);

            if (currentState < 1) {
                requestAnimationFrame.cancel(requestId);
                requestId = requestAnimationFrame(increment);
            } else {
                requestAnimationFrame.cancel(requestId);
                setTimeout(end, 100);
            }
        }

        function end() {
            if (ended === false) {
                started = false;
                ended = true;
                requestProgress.emit("end");
            }
        }


        requestProgress.startRequest = function() {
            requestStart();
        };

        requestProgress.finishRequest = function() {
            requestDone();
        };

        requestProgress.attachToGlobal = function() {
            function XMLHttpRequest() {
                var xhr = new XMLHttpRequestPolyfill();

                function onReadyStateChange() {
                    var state = +xhr.readyState;

                    if (state === 1) {
                        requestStart();
                    } else if (state === 4) {
                        requestDone();
                    }
                }

                if (isFunction(xhr.addEventListener)) {
                    xhr.addEventListener("readystatechange", onReadyStateChange, false);
                } else if (isFunction(xhr.attachEvent)) {
                    xhr.attachEvent("onreadystatechange", onReadyStateChange);
                } else {
                    xhr.onreadystatechange = onReadyStateChange;
                }

                return xhr;
            }

            XMLHttpRequest.prototype = XMLHttpRequestPolyfill.prototype;
            global.XMLHttpRequest = XMLHttpRequest;
        };


    },
    function(require, exports, module, global) {

        var process = require(3);
        var environment = require(4);


        var time = module.exports,
            dateNow, performance, HR_TIME, START_MS, now;


        dateNow = Date.now || function now() {
            return (new Date()).getTime();
        };


        if (environment.node) {
            HR_TIME = process.hrtime();

            now = function now() {
                var hrtime = process.hrtime(HR_TIME),
                    ms = hrtime[0] * 1e3,
                    ns = hrtime[1] * 1e-6;

                return ms + ns;
            };
        } else {
            performance = environment.window.performance || {};

            performance.now = (
                performance.now ||
                performance.webkitNow ||
                performance.mozNow ||
                performance.msNow ||
                performance.oNow ||
                function now() {
                    return dateNow() - START_MS;
                }
            );

            now = function now() {
                return performance.now();
            };
        }

        START_MS = dateNow();

        time.now = now;

        time.stamp = function stamp() {
            return START_MS + now();
        };


    },
    function(require, exports, module, global) {

        // shim for using process in browser

        var process = module.exports = {};

        process.nextTick = (function() {
            var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
            var canMutationObserver = typeof window !== 'undefined' && window.MutationObserver;
            var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;

            if (canSetImmediate) {
                return function(f) {
                    return window.setImmediate(f)
                };
            }

            var queue = [];

            if (canMutationObserver) {
                var hiddenDiv = document.createElement("div");
                var observer = new MutationObserver(function() {
                    var queueList = queue.slice();
                    queue.length = 0;
                    queueList.forEach(function(fn) {
                        fn();
                    });
                });

                observer.observe(hiddenDiv, {
                    attributes: true
                });

                return function nextTick(fn) {
                    if (!queue.length) {
                        hiddenDiv.setAttribute('yes', 'no');
                    }
                    queue.push(fn);
                };
            }

            if (canPost) {
                window.addEventListener('message', function(ev) {
                    var source = ev.source;
                    if ((source === window || source === null) && ev.data === 'process-tick') {
                        ev.stopPropagation();
                        if (queue.length > 0) {
                            var fn = queue.shift();
                            fn();
                        }
                    }
                }, true);

                return function nextTick(fn) {
                    queue.push(fn);
                    window.postMessage('process-tick', '*');
                };
            }

            return function nextTick(fn) {
                setTimeout(fn, 0);
            };
        })();

        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;

        process.binding = function(name) {
            throw new Error('process.binding is not supported');
        };

        // TODO(shtylman)
        process.cwd = function() {
            return '/'
        };
        process.chdir = function(dir) {
            throw new Error('process.chdir is not supported');
        };


    },
    function(require, exports, module, global) {

        var environment = module.exports,

            hasWindow = typeof(window) !== "undefined",
            userAgent = hasWindow ? window.navigator.userAgent : "";


        environment.browser = !!(
            hasWindow &&
            typeof(navigator) !== "undefined" &&
            window.document
        );

        environment.node = !environment.browser;

        environment.mobile = environment.browser && /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());

        environment.window = (
            hasWindow ? window :
            typeof(global) !== "undefined" ? global :
            typeof(self) !== "undefined" ? self : {}
        );

        environment.pixelRatio = environment.window.devicePixelRatio || 1;

        environment.document = typeof(document) !== "undefined" ? document : {};

        environment.isInWorker = typeof(importScripts) !== "undefined";


    },
    function(require, exports, module, global) {

        var objectFunction = "[object Function]",
            toString = Object.prototype.toString,
            isFunction;


        if (typeof(/./) === "function" || (typeof(Uint8Array) !== "undefined" && typeof(Uint8Array) !== "function")) {
            isFunction = function isFunction(obj) {
                return toString.call(obj) === objectFunction;
            };
        } else {
            isFunction = function isFunction(obj) {
                return typeof(obj) === "function" || false;
            };
        }


        module.exports = isFunction;


    },
    function(require, exports, module, global) {

        var isFunction = require(5),
            inherits = require(7),
            fastSlice = require(16),
            keys = require(10);


        function EventEmitter(maxListeners) {

            this.__events = {};
            this.__maxListeners = maxListeners != null ? maxListeners : EventEmitter.defaultMaxListeners;
        }

        EventEmitter.prototype.on = function(name, listener) {
            var events, eventList, maxListeners;

            if (!isFunction(listener)) {
                throw new TypeError("EventEmitter.on(name, listener) listener must be a function");
            }

            events = this.__events || (this.__events = {});
            eventList = (events[name] || (events[name] = []));
            maxListeners = this.__maxListeners || -1;

            eventList[eventList.length] = listener;

            if (maxListeners !== -1 && eventList.length > maxListeners) {
                console.error(
                    "EventEmitter.on(type, listener) possible EventEmitter memory leak detected. " + maxListeners + " listeners added"
                );
            }

            return this;
        };

        EventEmitter.prototype.addListener = EventEmitter.prototype.on;

        EventEmitter.prototype.once = function(name, listener) {
            var _this = this;

            function once() {
                var length = arguments.length;

                _this.off(name, once);

                if (length === 0) {
                    return listener();
                } else if (length === 1) {
                    return listener(arguments[0]);
                } else if (length === 2) {
                    return listener(arguments[0], arguments[1]);
                } else if (length === 3) {
                    return listener(arguments[0], arguments[1], arguments[2]);
                } else if (length === 4) {
                    return listener(arguments[0], arguments[1], arguments[2], arguments[3]);
                } else {
                    return listener.apply(null, arguments);
                }
            }

            this.on(name, once);

            return once;
        };

        EventEmitter.prototype.listenTo = function(obj, name) {
            var _this = this;

            if (!obj || !(isFunction(obj.on) || isFunction(obj.addListener))) {
                throw new TypeError("EventEmitter.listenTo(obj, name) obj must have a on function taking (name, listener[, ctx])");
            }

            function handler() {
                _this.emitArgs(name, arguments);
            }

            obj.on(name, handler);

            return handler;
        };

        EventEmitter.prototype.off = function(name, listener) {
            var events = this.__events || (this.__events = {}),
                eventList, event, i;

            eventList = events[name];
            if (!eventList) {
                return this;
            }

            if (!listener) {
                i = eventList.length;

                while (i--) {
                    this.emit("removeListener", name, eventList[i]);
                }
                eventList.length = 0;
                delete events[name];
            } else {
                i = eventList.length;

                while (i--) {
                    event = eventList[i];

                    if (event === listener) {
                        this.emit("removeListener", name, event);
                        eventList.splice(i, 1);
                    }
                }

                if (eventList.length === 0) {
                    delete events[name];
                }
            }

            return this;
        };

        EventEmitter.prototype.removeListener = EventEmitter.prototype.off;

        EventEmitter.prototype.removeAllListeners = function() {
            var events = this.__events || (this.__events = {}),
                objectKeys = keys(events),
                i = -1,
                il = objectKeys.length - 1,
                key, eventList, j;

            while (i++ < il) {
                key = objectKeys[i];
                eventList = events[key];

                if (eventList) {
                    j = eventList.length;

                    while (j--) {
                        this.emit("removeListener", key, eventList[j]);
                        eventList.splice(j, 1);
                    }
                }

                delete events[key];
            }

            return this;
        };

        function emit(eventList, args) {
            var a1, a2, a3, a4,
                length = eventList.length - 1,
                i = -1,
                event;

            switch (args.length) {
                case 0:
                    while (i++ < length) {
                        if ((event = eventList[i])) {
                            event();
                        }
                    }
                    break;
                case 1:
                    a1 = args[0];
                    while (i++ < length) {
                        if ((event = eventList[i])) {
                            event(a1);
                        }
                    }
                    break;
                case 2:
                    a1 = args[0];
                    a2 = args[1];
                    while (i++ < length) {
                        if ((event = eventList[i])) {
                            event(a1, a2);
                        }
                    }
                    break;
                case 3:
                    a1 = args[0];
                    a2 = args[1];
                    a3 = args[2];
                    while (i++ < length) {
                        if ((event = eventList[i])) {
                            event(a1, a2, a3);
                        }
                    }
                    break;
                case 4:
                    a1 = args[0];
                    a2 = args[1];
                    a3 = args[2];
                    a4 = args[3];
                    while (i++ < length) {
                        if ((event = eventList[i])) {
                            event(a1, a2, a3, a4);
                        }
                    }
                    break;
                default:
                    while (i++ < length) {
                        if ((event = eventList[i])) {
                            event.apply(null, args);
                        }
                    }
                    break;
            }
        }

        EventEmitter.prototype.emit = function(name) {
            var eventList = (this.__events || (this.__events = {}))[name];

            if (!eventList || !eventList.length) {
                return this;
            }

            emit(eventList, fastSlice(arguments, 1));

            return this;
        };

        EventEmitter.prototype.emitArgs = function(name, args) {
            var eventList = (this.__events || (this.__events = {}))[name];

            if (!eventList || !eventList.length) {
                return this;
            }

            emit(eventList, args);

            return this;
        };

        function emitAsync(eventList, args, callback) {
            var length = eventList.length,
                index = 0,
                called = false;

            function next(err) {
                if (called !== true) {
                    if (err || index === length) {
                        called = true;
                        callback(err);
                    } else {
                        eventList[index++].apply(null, args);
                    }
                }
            }

            args[args.length] = next;
            next();
        }

        EventEmitter.prototype.emitAsync = function(name, args, callback) {
            var eventList = (this.__events || (this.__events = {}))[name];

            args = fastSlice(arguments, 1);
            callback = args.pop();

            if (!isFunction(callback)) {
                throw new TypeError("EventEmitter.emitAsync(name [, ...args], callback) callback must be a function");
            }

            if (!eventList || !eventList.length) {
                callback();
            } else {
                emitAsync(eventList, args, callback);
            }

            return this;
        };

        EventEmitter.prototype.listeners = function(name) {
            var eventList = (this.__events || (this.__events = {}))[name];

            return eventList ? fastSlice(eventList) : [];
        };

        EventEmitter.prototype.listenerCount = function(name) {
            var eventList = (this.__events || (this.__events = {}))[name];

            return eventList ? eventList.length : 0;
        };

        EventEmitter.prototype.setMaxListeners = function(value) {
            if ((value = +value) !== value) {
                throw new TypeError("EventEmitter.setMaxListeners(value) value must be a number");
            }

            this.__maxListeners = value < 0 ? -1 : value;
            return this;
        };


        EventEmitter.defaultMaxListeners = 10;

        EventEmitter.listeners = function(obj, name) {
            var eventList;

            if (obj == null) {
                throw new TypeError("EventEmitter.listeners(obj, name) obj required");
            }
            eventList = obj.__events && obj.__events[name];

            return eventList ? fastSlice(eventList) : [];
        };

        EventEmitter.listenerCount = function(obj, name) {
            var eventList;

            if (obj == null) {
                throw new TypeError("EventEmitter.listenerCount(obj, name) obj required");
            }
            eventList = obj.__events && obj.__events[name];

            return eventList ? eventList.length : 0;
        };

        EventEmitter.setMaxListeners = function(value) {
            if ((value = +value) !== value) {
                throw new TypeError("EventEmitter.setMaxListeners(value) value must be a number");
            }

            EventEmitter.defaultMaxListeners = value < 0 ? -1 : value;
            return value;
        };

        EventEmitter.extend = function(child) {

            inherits(child, this);
            child.extend = this.extend;

            return child;
        };


        module.exports = EventEmitter;


    },
    function(require, exports, module, global) {

        var create = require(8),
            extend = require(9),
            mixin = require(14);


        module.exports = function inherits(child, parent) {

            mixin(child, parent);
            child.prototype = extend(create(parent.prototype), child.prototype);
            child.prototype.constructor = child;
            child.__super = parent.prototype;

            return child;
        };


    },
    function(require, exports, module, global) {

        module.exports = Object.create || (function() {
            function F() {}
            return function create(object) {
                F.prototype = object;
                return new F();
            };
        }());


    },
    function(require, exports, module, global) {

        var keys = require(10);


        function baseExtend(a, b) {
            var objectKeys = keys(b),
                i = -1,
                il = objectKeys.length - 1,
                key;

            while (i++ < il) {
                key = objectKeys[i];
                a[key] = b[key];
            }
        }

        module.exports = function extend(out) {
            var i = 0,
                il = arguments.length - 1;

            while (i++ < il) {
                baseExtend(out, arguments[i]);
            }

            return out;
        };


    },
    function(require, exports, module, global) {

        var has = require(11),
            isNative = require(12),
            isObject = require(13);


        var nativeKeys = Object.keys;


        if (!isNative(nativeKeys)) {
            nativeKeys = function keys(obj) {
                var localHas = has,
                    out = [],
                    i = 0,
                    key;

                for (key in obj) {
                    if (localHas(obj, key)) {
                        out[i++] = key;
                    }
                }

                return out;
            };
        }

        module.exports = function keys(obj) {
            return nativeKeys(isObject(obj) ? obj : Object(obj));
        };


    },
    function(require, exports, module, global) {

        var hasOwnProp = Object.prototype.hasOwnProperty;


        module.exports = function has(obj, key) {
            return hasOwnProp.call(obj, key);
        };


    },
    function(require, exports, module, global) {

        var isFunction = require(5);


        var reHostCtor = /^\[object .+?Constructor\]$/,

            functionToString = Function.prototype.toString,

            reNative = RegExp("^" +
                functionToString.call(toString)
                .replace(/[.*+?^${}()|[\]\/\\]/g, "\\$&")
                .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
            ),

            isHostObject = (function() {
                try {
                    String({
                        "toString": 0
                    } + "");
                } catch (e) {
                    return function isHostObject() {
                        return false;
                    };
                }

                return function isHostObject(value) {
                    return !isFunction(value.toString) && typeof(value + "") === "string";
                };
            }());


        module.exports = function isNative(obj) {
            return obj && (
                isFunction(obj) ?
                reNative.test(functionToString.call(obj)) : (
                    typeof(obj) === "object" && (
                        (isHostObject(obj) ? reNative : reHostCtor).test(obj) || false
                    )
                )
            ) || false;
        };


    },
    function(require, exports, module, global) {

        module.exports = function isObject(obj) {
            var type = typeof(obj);
            return type === "function" || (obj && type === "object") || false;
        };


    },
    function(require, exports, module, global) {

        var keys = require(10),
            isNullOrUndefined = require(15);


        function baseMixin(a, b) {
            var objectKeys = keys(b),
                i = -1,
                il = objectKeys.length - 1,
                key, value;

            while (i++ < il) {
                key = objectKeys[i];

                if (isNullOrUndefined(a[key]) && !isNullOrUndefined((value = b[key]))) {
                    a[key] = value;
                }
            }
        }

        module.exports = function mixin(out) {
            var i = 0,
                il = arguments.length - 1;

            while (i++ < il) {
                baseMixin(out, arguments[i]);
            }

            return out;
        };


    },
    function(require, exports, module, global) {

        module.exports = function isNullOrUndefined(obj) {
            return obj === null || obj === void 0;
        };


    },
    function(require, exports, module, global) {

        module.exports = function fastSlice(array, offset) {
            var length, i, il, result, j;

            offset = offset || 0;

            length = array.length;
            i = offset - 1;
            il = length - 1;
            result = new Array(length - offset);
            j = 0;

            while (i++ < il) {
                result[j++] = array[i];
            }

            return result;
        };


    },
    function(require, exports, module, global) {

        var extend = require(9),
            emptyFunction = require(18),
            environment = require(4);


        var window = environment.window,

            ActiveXObject = window.ActiveXObject,

            XMLHttpRequestPolyfill = (
                window.XMLHttpRequest ||
                (function getRequestType(types) {
                    var i = -1,
                        il = types.length - 1,
                        instance, type;

                    while (i++ < il) {
                        try {
                            type = types[i];
                            instance = type();
                            break;
                        } catch (e) {}
                    }

                    if (!type) {
                        throw new Error("XMLHttpRequest not supported by this browser");
                    }

                    return function XMLHttpRequest() {
                        return type();
                    };
                }([
                    function createActiveObject() {
                        return new ActiveXObject("Msxml2.XMLHTTP");
                    },
                    function createActiveObject() {
                        return new ActiveXObject("Msxml3.XMLHTTP");
                    },
                    function createActiveObject() {
                        return new ActiveXObject("Microsoft.XMLHTTP");
                    }
                ]))
            );


        XMLHttpRequestPolyfill.prototype.nativeSetRequestHeader = XMLHttpRequestPolyfill.prototype.setRequestHeader || emptyFunction;

        XMLHttpRequestPolyfill.prototype.setRequestHeader = function setRequestHeader(key, value) {
            (this.__requestHeaders__ || (this.__requestHeaders__ = {}))[key] = value;
            return this.nativeSetRequestHeader(key, value);
        };

        XMLHttpRequestPolyfill.prototype.getRequestHeader = function getRequestHeader(key) {
            return (this.__requestHeaders__ || (this.__requestHeaders__ = {}))[key];
        };

        XMLHttpRequestPolyfill.prototype.getRequestHeaders = function getRequestHeaders() {
            return extend({}, this.__requestHeaders__);
        };


        module.exports = XMLHttpRequestPolyfill;


    },
    function(require, exports, module, global) {

        module.exports = emptyFunction;


        function emptyFunction() {}

        function makeEmptyFunction(value) {
            return function() {
                return value;
            };
        }

        emptyFunction.thatReturns = makeEmptyFunction;
        emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
        emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
        emptyFunction.thatReturnsNull = makeEmptyFunction(null);
        emptyFunction.thatReturnsThis = function() {
            return this;
        };
        emptyFunction.thatReturnsArgument = function(argument) {
            return argument;
        };


    },
    function(require, exports, module, global) {

        var environment = require(4),
            emptyFunction = require(18),
            time = require(2);


        var window = environment.window,

            nativeRequestAnimationFrame = (
                window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame
            ),

            nativeCancelAnimationFrame = (
                window.cancelAnimationFrame ||
                window.cancelRequestAnimationFrame ||

                window.webkitCancelAnimationFrame ||
                window.webkitCancelRequestAnimationFrame ||

                window.mozCancelAnimationFrame ||
                window.mozCancelRequestAnimationFrame ||

                window.oCancelAnimationFrame ||
                window.oCancelRequestAnimationFrame ||

                window.msCancelAnimationFrame ||
                window.msCancelRequestAnimationFrame
            ),

            requestAnimationFrame, lastTime, max;


        if (nativeRequestAnimationFrame) {
            requestAnimationFrame = function requestAnimationFrame(callback, element) {
                return nativeRequestAnimationFrame.call(window, callback, element);
            };
        } else {
            max = Math.max;
            lastTime = 0;

            requestAnimationFrame = function requestAnimationFrame(callback) {
                var current = time.now(),
                    timeToCall = max(0, 16 - (current - lastTime)),
                    id = global.setTimeout(
                        function runCallback() {
                            callback(current + timeToCall);
                        },
                        timeToCall
                    );

                lastTime = current + timeToCall;
                return id;
            };
        }


        if (nativeCancelAnimationFrame) {
            requestAnimationFrame.cancel = function(id) {
                return nativeCancelAnimationFrame.call(window, id);
            };
        } else {
            requestAnimationFrame.cancel = function(id) {
                return global.clearTimeout(id);
            };
        }


        requestAnimationFrame(emptyFunction);


        module.exports = requestAnimationFrame;


    }
], (new Function("return this;"))()));
