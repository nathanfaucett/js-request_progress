(function(dependencies, undefined, global) {
    var cache = [];

    function require(index) {
        var module = cache[index],
            callback, exports;

        if (module !== undefined) {
            return module.exports;
        } else {
            callback = dependencies[index];
            exports = {};

            cache[index] = module = {
                exports: exports,
                require: require
            };

            callback.call(exports, require, exports, module, global);
            return module.exports;
        }
    }

    require.resolve = function(path) {
        return path;
    };

    if (typeof(define) === "function" && define.amd) {
        define([], function() {
            return require(0);
        });
    } else if (typeof(module) !== "undefined" && module.exports) {
        module.exports = require(0);
    } else {
        
        require(0);
        
    }
}([
function(require, exports, module, global) {

var requestProgress = require(1);


requestProgress.attachToGlobal();


var div = document.getElementById("progress");


requestProgress.element = div;

requestProgress.on("start", function() {
    console.log("start");
    console.time("progress");
});
requestProgress.on("end", function() {
    div.style.width = "0%";
    console.log("end");
    console.timeEnd("progress");
});
requestProgress.on("update", function(percent) {
    div.style.width = (percent * 100) + "%";
});


function makeRequest() {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "http://localhost:3000", true);
    xhr.send();
}


function request() {
    var count = 0;

    (function doit() {
        makeRequest();

        if (++count !== 5) {
            doit();
        }
    }());
}

request();

global.request = request;


},
function(require, exports, module, global) {

var time = require(2),
    isFunction = require(5),
    EventEmitter = require(6),
    XMLHttpRequestPolyfill = require(27),
    requestAnimationFrame = require(32);


var requestProgress = module.exports = new EventEmitter(),

    currentState = 0,
    previousState = 0,
    nextState = 0,

    startTime = 0,
    frameTime = 0,
    frameCount = 0,
    frameDelta = 0,

    currentDelta = 0,
    previousDelta = 0,

    started = false,
    ended = true,

    totalRequests = 0,
    completedRequests = 0,

    requestId = null;


function lerp(a, b, t) {
    return a + (b - a) * t;
}

function clamp01(x) {
    return x > 1 ? 1 : (x < 0 ? 0 : x);
}

function requestStart() {
    if (started === false) {
        started = true;
        ended = false;
        currentDelta = 0;
        requestProgress.emit("start");
        setProgressFake(0.1);
    }
    startTime = time.now();
    totalRequests += 1;
}

function requestDone() {
    completedRequests += 1;
    setProgress(completedRequests / totalRequests, time.now() - startTime);
}

function setProgressFake(value) {
    previousState = 0;
    nextState = value;

    frameDelta = 1000 + Math.random() * 2500;
    frameTime = time.now();
    frameCount = 0;

    requestAnimationFrame.cancel(requestId);
    requestId = requestAnimationFrame(increment, requestProgress.element);
}

function setProgress(value, delta) {
    previousState = nextState;
    nextState = value;

    previousDelta = currentDelta;
    currentDelta = delta;

    frameDelta = delta - previousDelta;
    frameTime = time.now();
    frameCount = 0;

    requestAnimationFrame.cancel(requestId);
    requestId = requestAnimationFrame(increment, requestProgress.element);
}

function increment(ms) {
    var last = frameTime,
        dt = ms - last;

    frameTime = ms;
    frameCount += dt;

    currentState = lerp(previousState, nextState, clamp01(frameCount / frameDelta));
    requestProgress.emit("update", currentState);

    if (currentState < 1) {
        requestAnimationFrame.cancel(requestId);
        requestId = requestAnimationFrame(increment, requestProgress.element);
    } else {
        requestAnimationFrame.cancel(requestId);
        setTimeout(end, requestProgress.endPauseTime);
    }
}

function end() {
    if (ended === false) {
        started = false;
        ended = true;
        requestProgress.emit("end");
    }
}


requestProgress.element = null;
requestProgress.endPauseTime = 250;

requestProgress.startRequest = function() {
    requestStart();
};

requestProgress.finishRequest = function() {
    requestDone();
};

requestProgress.attachToGlobal = function() {
    function XMLHttpRequest() {
        var xhr = new XMLHttpRequestPolyfill();

        function onReadyStateChange() {
            var state = +xhr.readyState;

            if (state === 1) {
                requestStart();
            } else if (state === 4) {
                requestDone();
            }
        }

        if (isFunction(xhr.addEventListener)) {
            xhr.addEventListener("readystatechange", onReadyStateChange, false);
        } else if (isFunction(xhr.attachEvent)) {
            xhr.attachEvent("onreadystatechange", onReadyStateChange);
        } else {
            xhr.onreadystatechange = onReadyStateChange;
        }

        return xhr;
    }

    XMLHttpRequest.prototype = XMLHttpRequestPolyfill.prototype;
    global.XMLHttpRequest = XMLHttpRequest;
};


},
function(require, exports, module, global) {

var now = require(3);


var time = exports,
    START_TIME = now.getStartTime();


time.now = now;


time.stamp = function stamp() {
    return START_TIME + now();
};


},
function(require, exports, module, global) {

var process = require(4);
var Date_now = Date.now || function Date_now() {
        return (new Date()).getTime();
    },

    START_TIME = Date_now(),

    now, performance, HR_TIME;


if (typeof(window) !== "undefined") {
    performance = window.performance || {};

    performance.now = (
        performance.now ||
        performance.webkitNow ||
        performance.mozNow ||
        performance.msNow ||
        performance.oNow ||
        function now() {
            return Date_now() - START_TIME;
        }
    );

    now = function now() {
        return performance.now();
    };
} else {
    HR_TIME = process.hrtime();

    now = function now() {
        var hrtime = process.hrtime(HR_TIME);
        return (hrtime[0] * 1e3) + (hrtime[1] * 1e-6);
    };
}


now.getStartTime = function getStartTime() {
    return START_TIME;
};


START_TIME -= now();


module.exports = now;


},
function(require, exports, module, global) {

// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canMutationObserver = typeof window !== 'undefined'
    && window.MutationObserver;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    var queue = [];

    if (canMutationObserver) {
        var hiddenDiv = document.createElement("div");
        var observer = new MutationObserver(function () {
            var queueList = queue.slice();
            queue.length = 0;
            queueList.forEach(function (fn) {
                fn();
            });
        });

        observer.observe(hiddenDiv, { attributes: true });

        return function nextTick(fn) {
            if (!queue.length) {
                hiddenDiv.setAttribute('yes', 'no');
            }
            queue.push(fn);
        };
    }

    if (canPost) {
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};


},
function(require, exports, module, global) {

var objectToString = Object.prototype.toString,
    isFunction;


if (objectToString.call(function() {}) === "[object Object]") {
    isFunction = function isFunction(value) {
        return value instanceof Function;
    };
} else if (typeof(/./) === "function" || (typeof(Uint8Array) !== "undefined" && typeof(Uint8Array) !== "function")) {
    isFunction = function isFunction(value) {
        return objectToString.call(value) === "[object Function]";
    };
} else {
    isFunction = function isFunction(value) {
        return typeof(value) === "function" || false;
    };
}


module.exports = isFunction;


},
function(require, exports, module, global) {

var isFunction = require(5),
    inherits = require(7),
    fastSlice = require(24),
    keys = require(18),
    isNullOrUndefined = require(11);


var EventEmitterPrototype;


module.exports = EventEmitter;


function EventEmitter(maxListeners) {
    this.__events = {};
    this.__maxListeners = isNullOrUndefined(maxListeners) ? +maxListeners : EventEmitter.defaultMaxListeners;
}
EventEmitterPrototype = EventEmitter.prototype;

EventEmitterPrototype.on = function(name, listener) {
    var events, eventList, maxListeners;

    if (!isFunction(listener)) {
        throw new TypeError("EventEmitter.on(name, listener) listener must be a function");
    }

    events = this.__events || (this.__events = {});
    eventList = (events[name] || (events[name] = []));
    maxListeners = this.__maxListeners || -1;

    eventList[eventList.length] = listener;

    if (maxListeners !== -1 && eventList.length > maxListeners) {
        console.error(
            "EventEmitter.on(type, listener) possible EventEmitter memory leak detected. " + maxListeners + " listeners added"
        );
    }

    return this;
};

EventEmitterPrototype.addEventListener = EventEmitterPrototype.addListener = EventEmitterPrototype.on;

EventEmitterPrototype.once = function(name, listener) {
    var _this = this;

    function once() {

        _this.off(name, once);

        switch (arguments.length) {
            case 0:
                return listener();
            case 1:
                return listener(arguments[0]);
            case 2:
                return listener(arguments[0], arguments[1]);
            case 3:
                return listener(arguments[0], arguments[1], arguments[2]);
            case 4:
                return listener(arguments[0], arguments[1], arguments[2], arguments[3]);
            default:
                return listener.apply(null, arguments);
        }
    }

    this.on(name, once);

    return once;
};

EventEmitterPrototype.listenTo = function(value, name) {
    var _this = this;

    if (!value || !(isFunction(value.on) || isFunction(value.addListener))) {
        throw new TypeError("EventEmitter.listenTo(value, name) value must have a on function taking (name, listener[, ctx])");
    }

    function handler() {
        _this.emitArgs(name, arguments);
    }

    value.on(name, handler);

    return handler;
};

EventEmitterPrototype.off = function(name, listener) {
    var events = this.__events || (this.__events = {}),
        eventList, event, i;

    eventList = events[name];
    if (!eventList) {
        return this;
    }

    if (!listener) {
        i = eventList.length;

        while (i--) {
            this.emit("removeListener", name, eventList[i]);
        }
        eventList.length = 0;
        delete events[name];
    } else {
        i = eventList.length;

        while (i--) {
            event = eventList[i];

            if (event === listener) {
                this.emit("removeListener", name, event);
                eventList.splice(i, 1);
            }
        }

        if (eventList.length === 0) {
            delete events[name];
        }
    }

    return this;
};

EventEmitterPrototype.removeEventListener = EventEmitterPrototype.removeListener = EventEmitterPrototype.off;

EventEmitterPrototype.removeAllListeners = function() {
    var events = this.__events || (this.__events = {}),
        objectKeys = keys(events),
        i = -1,
        il = objectKeys.length - 1,
        key, eventList, j;

    while (i++ < il) {
        key = objectKeys[i];
        eventList = events[key];

        if (eventList) {
            j = eventList.length;

            while (j--) {
                this.emit("removeListener", key, eventList[j]);
                eventList.splice(j, 1);
            }
        }

        delete events[key];
    }

    return this;
};

function emit(eventList, args) {
    var a1, a2, a3, a4, a5,
        length = eventList.length - 1,
        i = -1,
        event;

    switch (args.length) {
        case 0:
            while (i++ < length) {
                if ((event = eventList[i])) {
                    event();
                }
            }
            break;
        case 1:
            a1 = args[0];
            while (i++ < length) {
                if ((event = eventList[i])) {
                    event(a1);
                }
            }
            break;
        case 2:
            a1 = args[0];
            a2 = args[1];
            while (i++ < length) {
                if ((event = eventList[i])) {
                    event(a1, a2);
                }
            }
            break;
        case 3:
            a1 = args[0];
            a2 = args[1];
            a3 = args[2];
            while (i++ < length) {
                if ((event = eventList[i])) {
                    event(a1, a2, a3);
                }
            }
            break;
        case 4:
            a1 = args[0];
            a2 = args[1];
            a3 = args[2];
            a4 = args[3];
            while (i++ < length) {
                if ((event = eventList[i])) {
                    event(a1, a2, a3, a4);
                }
            }
            break;
        case 5:
            a1 = args[0];
            a2 = args[1];
            a3 = args[2];
            a4 = args[3];
            a5 = args[4];
            while (i++ < length) {
                if ((event = eventList[i])) {
                    event(a1, a2, a3, a4, a5);
                }
            }
            break;
        default:
            while (i++ < length) {
                if ((event = eventList[i])) {
                    event.apply(null, args);
                }
            }
            break;
    }
}

EventEmitterPrototype.emitArgs = function(name, args) {
    var eventList = (this.__events || (this.__events = {}))[name];

    if (!eventList || !eventList.length) {
        return this;
    }

    emit(eventList, args);

    return this;
};

EventEmitterPrototype.emit = function(name) {
    return this.emitArgs(name, fastSlice(arguments, 1));
};

function createFunctionCaller(args) {
    switch (args.length) {
        case 0:
            return function functionCaller(fn) {
                return fn();
            };
        case 1:
            return function functionCaller(fn) {
                return fn(args[0]);
            };
        case 2:
            return function functionCaller(fn) {
                return fn(args[0], args[1]);
            };
        case 3:
            return function functionCaller(fn) {
                return fn(args[0], args[1], args[2]);
            };
        case 4:
            return function functionCaller(fn) {
                return fn(args[0], args[1], args[2], args[3]);
            };
        case 5:
            return function functionCaller(fn) {
                return fn(args[0], args[1], args[2], args[3], args[4]);
            };
        default:
            return function functionCaller(fn) {
                return fn.apply(null, args);
            };
    }
}

function emitAsync(eventList, args, callback) {
    var length = eventList.length,
        index = 0,
        called = false,
        functionCaller;

    function next(err) {
        if (called !== true) {
            if (err || index === length) {
                called = true;
                callback(err);
            } else {
                functionCaller(eventList[index++]);
            }
        }
    }

    args[args.length] = next;
    functionCaller = createFunctionCaller(args);
    next();
}

EventEmitterPrototype.emitAsync = function(name, args, callback) {
    var eventList = (this.__events || (this.__events = {}))[name];

    args = fastSlice(arguments, 1);
    callback = args.pop();

    if (!isFunction(callback)) {
        throw new TypeError("EventEmitter.emitAsync(name [, ...args], callback) callback must be a function");
    }

    if (!eventList || !eventList.length) {
        callback();
    } else {
        emitAsync(eventList, args, callback);
    }

    return this;
};

EventEmitterPrototype.listeners = function(name) {
    var eventList = (this.__events || (this.__events = {}))[name];
    return eventList ? eventList.slice() : [];
};

EventEmitterPrototype.listenerCount = function(name) {
    var eventList = (this.__events || (this.__events = {}))[name];
    return eventList ? eventList.length : 0;
};

EventEmitterPrototype.setMaxListeners = function(value) {
    if ((value = +value) !== value) {
        throw new TypeError("EventEmitter.setMaxListeners(value) value must be a number");
    }

    this.__maxListeners = value < 0 ? -1 : value;
    return this;
};

inherits.defineProperty(EventEmitter, "defaultMaxListeners", 10);

inherits.defineProperty(EventEmitter, "listeners", function(value, name) {
    var eventList;

    if (isNullOrUndefined(value)) {
        throw new TypeError("EventEmitter.listeners(value, name) value required");
    }
    eventList = value.__events && value.__events[name];

    return eventList ? eventList.slice() : [];
});

inherits.defineProperty(EventEmitter, "listenerCount", function(value, name) {
    var eventList;

    if (isNullOrUndefined(value)) {
        throw new TypeError("EventEmitter.listenerCount(value, name) value required");
    }
    eventList = value.__events && value.__events[name];

    return eventList ? eventList.length : 0;
});

inherits.defineProperty(EventEmitter, "setMaxListeners", function(value) {
    if ((value = +value) !== value) {
        throw new TypeError("EventEmitter.setMaxListeners(value) value must be a number");
    }

    EventEmitter.defaultMaxListeners = value < 0 ? -1 : value;
    return value;
});

EventEmitter.extend = function(child) {
    inherits(child, this);
    return child;
};


},
function(require, exports, module, global) {

var create = require(8),
    extend = require(17),
    mixin = require(22),
    defineProperty = require(23);


var descriptor = {
    configurable: true,
    enumerable: false,
    writable: true,
    value: null
};


module.exports = inherits;


function inherits(child, parent) {

    mixin(child, parent);

    if (child.__super) {
        child.prototype = extend(create(parent.prototype), child.__super, child.prototype);
    } else {
        child.prototype = extend(create(parent.prototype), child.prototype);
    }

    defineNonEnumerableProperty(child, "__super", parent.prototype);
    defineNonEnumerableProperty(child.prototype, "constructor", child);

    child.defineStatic = defineStatic;
    child.super_ = parent;

    return child;
}
inherits.defineProperty = defineNonEnumerableProperty;

function defineNonEnumerableProperty(object, name, value) {
    descriptor.value = value;
    defineProperty(object, name, descriptor);
    descriptor.value = null;
}

function defineStatic(name, value) {
    defineNonEnumerableProperty(this, name, value);
}


},
function(require, exports, module, global) {

var isNull = require(9),
    isNative = require(10),
    isPrimitive = require(16);


var nativeCreate = Object.create;


module.exports = create;


function create(object) {
    return nativeCreate(isPrimitive(object) ? null : object);
}

if (!isNative(nativeCreate)) {
    nativeCreate = function nativeCreate(object) {
        var newObject;

        function F() {
            this.constructor = F;
        }

        if (isNull(object)) {
            newObject = new F();
            newObject.constructor = newObject.__proto__ = null;
            delete newObject.__proto__;
            return newObject;
        } else {
            F.prototype = object;
            return new F();
        }
    };
}


module.exports = create;


},
function(require, exports, module, global) {

module.exports = isNull;


function isNull(value) {
    return value === null;
}


},
function(require, exports, module, global) {

var isFunction = require(5),
    isNullOrUndefined = require(11),
    escapeRegExp = require(13);


var reHostCtor = /^\[object .+?Constructor\]$/,

    functionToString = Function.prototype.toString,

    reNative = RegExp("^" +
        escapeRegExp(Object.prototype.toString)
        .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    ),

    isHostObject;


module.exports = isNative;


function isNative(value) {
    return !isNullOrUndefined(value) && (
        isFunction(value) ?
        reNative.test(functionToString.call(value)) : (
            typeof(value) === "object" && (
                (isHostObject(value) ? reNative : reHostCtor).test(value) || false
            )
        )
    ) || false;
}

try {
    String({
        "toString": 0
    } + "");
} catch (e) {
    isHostObject = function isHostObject() {
        return false;
    };
}

isHostObject = function isHostObject(value) {
    return !isFunction(value.toString) && typeof(value + "") === "string";
};


},
function(require, exports, module, global) {

var isNull = require(9),
    isUndefined = require(12);


module.exports = isNullOrUndefined;

/**
  isNullOrUndefined accepts any value and returns true
  if the value is null or undefined. For all other values
  false is returned.
  
  @param {Any}        any value to test
  @returns {Boolean}  the boolean result of testing value

  @example
    isNullOrUndefined(null);   // returns true
    isNullOrUndefined(undefined);   // returns true
    isNullOrUndefined("string");    // returns false
**/
function isNullOrUndefined(value) {
    return isNull(value) || isUndefined(value);
}


},
function(require, exports, module, global) {

module.exports = isUndefined;


function isUndefined(value) {
    return value === void(0);
}


},
function(require, exports, module, global) {

var toString = require(14);


var reRegExpChars = /[.*+?\^${}()|\[\]\/\\]/g,
    reHasRegExpChars = new RegExp(reRegExpChars.source);


module.exports = escapeRegExp;


function escapeRegExp(string) {
    string = toString(string);
    return (
        (string && reHasRegExpChars.test(string)) ?
        string.replace(reRegExpChars, "\\$&") :
        string
    );
}


},
function(require, exports, module, global) {

var isString = require(15),
    isNullOrUndefined = require(11);


module.exports = toString;


function toString(value) {
    if (isString(value)) {
        return value;
    } else if (isNullOrUndefined(value)) {
        return "";
    } else {
        return value + "";
    }
}


},
function(require, exports, module, global) {

module.exports = isString;


function isString(value) {
    return typeof(value) === "string" || false;
}


},
function(require, exports, module, global) {

var isNullOrUndefined = require(11);


module.exports = isPrimitive;


function isPrimitive(obj) {
    var typeStr;
    return isNullOrUndefined(obj) || ((typeStr = typeof(obj)) !== "object" && typeStr !== "function") || false;
}


},
function(require, exports, module, global) {

var keys = require(18);


module.exports = extend;


function extend(out) {
    var i = 0,
        il = arguments.length - 1;

    while (i++ < il) {
        baseExtend(out, arguments[i]);
    }

    return out;
}

function baseExtend(a, b) {
    var objectKeys = keys(b),
        i = -1,
        il = objectKeys.length - 1,
        key;

    while (i++ < il) {
        key = objectKeys[i];
        a[key] = b[key];
    }
}


},
function(require, exports, module, global) {

var has = require(19),
    isNative = require(10),
    isNullOrUndefined = require(11),
    isObject = require(21);


var nativeKeys = Object.keys;


module.exports = keys;


function keys(value) {
    if (isNullOrUndefined(value)) {
        return [];
    } else {
        return nativeKeys(isObject(value) ? value : Object(value));
    }
}

if (!isNative(nativeKeys)) {
    nativeKeys = function(value) {
        var localHas = has,
            out = [],
            i = 0,
            key;

        for (key in value) {
            if (localHas(value, key)) {
                out[i++] = key;
            }
        }

        return out;
    };
}


},
function(require, exports, module, global) {

var isNative = require(10),
    getPrototypeOf = require(20),
    isNullOrUndefined = require(11);


var nativeHasOwnProp = Object.prototype.hasOwnProperty,
    baseHas;


module.exports = has;


function has(object, key) {
    if (isNullOrUndefined(object)) {
        return false;
    } else {
        return baseHas(object, key);
    }
}

if (isNative(nativeHasOwnProp)) {
    baseHas = function baseHas(object, key) {
        return nativeHasOwnProp.call(object, key);
    };
} else {
    baseHas = function baseHas(object, key) {
        var proto = getPrototypeOf(object);

        if (isNullOrUndefined(proto)) {
            return key in object;
        } else {
            return (key in object) && (!(key in proto) || proto[key] !== object[key]);
        }
    };
}


},
function(require, exports, module, global) {

var isObject = require(21),
    isNative = require(10),
    isNullOrUndefined = require(11);


var nativeGetPrototypeOf = Object.getPrototypeOf,
    baseGetPrototypeOf;


module.exports = getPrototypeOf;


function getPrototypeOf(value) {
    if (isNullOrUndefined(value)) {
        return null;
    } else {
        return baseGetPrototypeOf(value);
    }
}

if (isNative(nativeGetPrototypeOf)) {
    baseGetPrototypeOf = function baseGetPrototypeOf(value) {
        return nativeGetPrototypeOf(isObject(value) ? value : Object(value)) || null;
    };
} else {
    if ("".__proto__ === String.prototype) {
        baseGetPrototypeOf = function baseGetPrototypeOf(value) {
            return value.__proto__ || null;
        };
    } else {
        baseGetPrototypeOf = function baseGetPrototypeOf(value) {
            return value.constructor ? value.constructor.prototype : null;
        };
    }
}


},
function(require, exports, module, global) {

var isNull = require(9);


module.exports = isObject;


function isObject(value) {
    var type = typeof(value);
    return type === "function" || (!isNull(value) && type === "object") || false;
}


},
function(require, exports, module, global) {

var keys = require(18),
    isNullOrUndefined = require(11);


module.exports = mixin;


function mixin(out) {
    var i = 0,
        il = arguments.length - 1;

    while (i++ < il) {
        baseMixin(out, arguments[i]);
    }

    return out;
}

function baseMixin(a, b) {
    var objectKeys = keys(b),
        i = -1,
        il = objectKeys.length - 1,
        key, value;

    while (i++ < il) {
        key = objectKeys[i];

        if (isNullOrUndefined(a[key]) && !isNullOrUndefined((value = b[key]))) {
            a[key] = value;
        }
    }
}


},
function(require, exports, module, global) {

var isObject = require(21),
    isFunction = require(5),
    isPrimitive = require(16),
    isNative = require(10),
    has = require(19);


var nativeDefineProperty = Object.defineProperty;


module.exports = defineProperty;


function defineProperty(object, name, descriptor) {
    if (isPrimitive(descriptor) || isFunction(descriptor)) {
        descriptor = {
            value: descriptor
        };
    }
    return nativeDefineProperty(object, name, descriptor);
}

defineProperty.hasGettersSetters = true;

if (!isNative(nativeDefineProperty) || !(function() {
        var object = {};
        try {
            nativeDefineProperty(object, "key", {
                value: "value"
            });
            if (has(object, "key") && object.key === "value") {
                return true;
            }
        } catch (e) {}
        return false;
    }())) {

    defineProperty.hasGettersSetters = false;

    nativeDefineProperty = function defineProperty(object, name, descriptor) {
        if (!isObject(object)) {
            throw new TypeError("defineProperty(object, name, descriptor) called on non-object");
        }
        if (has(descriptor, "get") || has(descriptor, "set")) {
            throw new TypeError("defineProperty(object, name, descriptor) this environment does not support getters or setters");
        }
        object[name] = descriptor.value;
    };
}


},
function(require, exports, module, global) {

var clamp = require(25),
    isNumber = require(26);


module.exports = fastSlice;


function fastSlice(array, offset) {
    var length = array.length,
        newLength, i, il, result, j;

    offset = clamp(isNumber(offset) ? offset : 0, 0, length);
    i = offset - 1;
    il = length - 1;
    newLength = length - offset;
    result = new Array(newLength);
    j = 0;

    while (i++ < il) {
        result[j++] = array[i];
    }

    return result;
}


},
function(require, exports, module, global) {

module.exports = clamp;


function clamp(x, min, max) {
    if (x < min) {
        return min;
    } else if (x > max) {
        return max;
    } else {
        return x;
    }
}


},
function(require, exports, module, global) {

module.exports = isNumber;


function isNumber(value) {
    return typeof(value) === "number" || false;
}


},
function(require, exports, module, global) {

var extend = require(17),
    environment = require(28),
    emptyFunction = require(29),
    createXMLHttpRequest = require(30),
    toUint8Array = require(31);


var window = environment.window,

    NativeXMLHttpRequest = window.XMLHttpRequest,
    NativeActiveXObject = window.ActiveXObject,

    XMLHttpRequestPolyfill = (
        NativeXMLHttpRequest ||
        (function getRequestObject(types) {
            var i = -1,
                il = types.length - 1,
                instance, type;

            while (i++ < il) {
                try {
                    type = types[i];
                    instance = new NativeActiveXObject(type);
                    break;
                } catch (e) {}
                type = null;
            }

            if (!type) {
                throw new Error("XMLHttpRequest not supported by this browser");
            }

            return createXMLHttpRequest(function createNativeObject() {
                return new NativeActiveXObject(type);
            });
        }([
            "Msxml2.XMLHTTP",
            "Msxml3.XMLHTTP",
            "Microsoft.XMLHTTP"
        ]))
    ),

    XMLHttpRequestPolyfillPrototype = XMLHttpRequestPolyfill.prototype;


if (!(XMLHttpRequestPolyfillPrototype.addEventListener || XMLHttpRequestPolyfillPrototype.attachEvent)) {
    XMLHttpRequestPolyfill = createXMLHttpRequest(function createNativeObject() {
        return new NativeXMLHttpRequest();
    });
    XMLHttpRequestPolyfillPrototype = XMLHttpRequestPolyfill.prototype;
}

XMLHttpRequestPolyfillPrototype.nativeSetRequestHeader = XMLHttpRequestPolyfillPrototype.setRequestHeader || emptyFunction;

XMLHttpRequestPolyfillPrototype.setRequestHeader = function(key, value) {
    (this.__requestHeaders || (this.__requestHeaders = {}))[key] = value;
    this.nativeSetRequestHeader(key, value);
};

XMLHttpRequestPolyfillPrototype.getRequestHeader = function(key) {
    return (this.__requestHeaders || (this.__requestHeaders = {}))[key];
};

XMLHttpRequestPolyfillPrototype.getRequestHeaders = function() {
    return extend({}, this.__requestHeaders);
};

if (!XMLHttpRequestPolyfillPrototype.setTimeout) {
    XMLHttpRequestPolyfillPrototype.setTimeout = function(ms) {
        this.timeout = ms;
    };
}

if (!XMLHttpRequestPolyfillPrototype.setWithCredentials) {
    XMLHttpRequestPolyfillPrototype.setWithCredentials = function(value) {
        this.withCredentials = !!value;
    };
}

if (!XMLHttpRequestPolyfillPrototype.sendAsBinary) {
    XMLHttpRequestPolyfillPrototype.sendAsBinary = function(str) {
        return this.send(toUint8Array(str));
    };
}


module.exports = XMLHttpRequestPolyfill;


},
function(require, exports, module, global) {

var environment = exports,

    hasWindow = typeof(window) !== "undefined",
    userAgent = hasWindow ? window.navigator.userAgent : "";


environment.worker = typeof(importScripts) !== "undefined";

environment.browser = environment.worker || !!(
    hasWindow &&
    typeof(navigator) !== "undefined" &&
    window.document
);

environment.node = !environment.worker && !environment.browser;

environment.mobile = environment.browser && /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());

environment.window = (
    hasWindow ? window :
    typeof(global) !== "undefined" ? global :
    typeof(self) !== "undefined" ? self : {}
);

environment.pixelRatio = environment.window.devicePixelRatio || 1;

environment.document = typeof(document) !== "undefined" ? document : {};


},
function(require, exports, module, global) {

module.exports = emptyFunction;


function emptyFunction() {}

function makeEmptyFunction(value) {
    return function() {
        return value;
    };
}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() {
    return this;
};
emptyFunction.thatReturnsArgument = function(argument) {
    return argument;
};


},
function(require, exports, module, global) {

var EventEmitter = require(6),
    toUint8Array = require(31);


module.exports = createXMLHttpRequest;


function createXMLHttpRequest(createNativeObject) {
    var XMLHttpRequestPrototype;


    function XMLHttpRequest() {
        var _this = this,
            nativeObject = createNativeObject();

        EventEmitter.call(this, -1);

        this.__requestHeaders = {};
        this.__nativeObject = nativeObject;

        this.onabort = null;
        this.onerror = null;
        this.onload = null;
        this.onloadend = null;
        this.onloadstart = null;
        this.onprogress = null;
        this.onreadystatechange = null;
        this.ontimeout = null;
        this.readyState = 0;
        this.response = "";
        this.responseText = "";
        this.responseType = "";
        this.responseURL = "";
        this.responseXML = null;
        this.status = 0;
        this.statusText = "";
        this.timeout = 0;
        this.withCredentials = false;

        nativeObject.onreadystatechange = function(e) {
            return XMLHttpRequest_onReadyStateChange(_this, e);
        };

        nativeObject.ontimeout = function(e) {
            if (_this.ontimeout) {
                _this.ontimeout(e);
            }
            _this.emit("timeout");
        };

        nativeObject.onerror = function(e) {
            if (_this.onerror) {
                _this.onerror(e);
            }
            _this.emit("error");
        };
    }
    EventEmitter.extend(XMLHttpRequest);
    XMLHttpRequestPrototype = XMLHttpRequest.prototype;

    function XMLHttpRequest_onReadyStateChange(_this, e) {
        var nativeObject = _this.__nativeObject,
            response;

        _this.readyState = nativeObject.readyState;

        if (_this.onreadystatechange) {
            _this.onreadystatechange(e);
        }
        _this.emit("readystatechange", e);

        switch (nativeObject.readyState) {
            case 3:
                if (_this.onprogress) {
                    _this.onprogress();
                }
                _this.emit("progress", e);
                break;
            case 4:
                response = nativeObject.response || "";

                if (_this.responseType === "arraybuffer") {
                    response = toUint8Array(response);
                }

                _this.response = response;
                _this.responseText = nativeObject.responseText || _this.response;
                _this.responseType = nativeObject.responseType || "";
                _this.responseURL = nativeObject.responseURL || "";
                _this.responseXML = nativeObject.responseXML || _this.response;
                _this.status = nativeObject.status || 0;
                _this.statusText = nativeObject.statusText || "";

                if (_this.onload) {
                    _this.onload();
                }
                _this.emit("load", e);
                if (_this.onloadend) {
                    _this.onloadend();
                }
                _this.emit("loadend", e);
                break;
        }

        return _this;
    }

    XMLHttpRequestPrototype.attachEvent = function(type, fn) {
        return this.on(type.slice(2), fn);
    };
    XMLHttpRequestPrototype.detachEvent = function(type, fn) {
        return this.off(type.slice(2), fn);
    };

    XMLHttpRequestPrototype.addEventListener = XMLHttpRequestPrototype.on;
    XMLHttpRequestPrototype.removeEventListener = XMLHttpRequestPrototype.off;

    XMLHttpRequestPrototype.dispatchEvent = function(event) {
        return this.emit(event.type, event);
    };

    XMLHttpRequestPrototype.fireEvent = function(type, event) {
        return this.emit("on" + type, event);
    };

    XMLHttpRequestPrototype.abort = function() {
        try {
            if (this.onabort) {
                this.onabort();
            }
            _this.emit("abort", {});
            this.__nativeObject.abort();
        } catch (e) {}
    };

    XMLHttpRequestPrototype.setTimeout = function(ms) {
        this.timeout = ms;
        try {
            this.__nativeObject.timeout = ms;
        } catch (e) {}
    };

    XMLHttpRequestPrototype.setWithCredentials = function(value) {
        value = !!value;
        this.withCredentials = value;
        try {
            this.__nativeObject.withCredentials = value;
        } catch (e) {}
    };

    XMLHttpRequestPrototype.getAllResponseHeaders = function() {
        try {
            return this.__nativeObject.getAllResponseHeaders();
        } catch (e) {
            return null;
        }
    };

    XMLHttpRequestPrototype.getResponseHeader = function(header) {
        try {
            return this.__nativeObject.getResponseHeader(header);
        } catch (e) {
            return null;
        }
    };

    XMLHttpRequestPrototype.getResponseHeader = function(header) {
        try {
            return this.__nativeObject.getResponseHeader(header);
        } catch (e) {
            return null;
        }
    };

    XMLHttpRequestPrototype.open = function(method, url, async, user, password) {
        if (this.readyState === 0) {
            this.readyState = 1;
            return this.__nativeObject.open(method, url, async, user, password);
        } else {
            return undefined;
        }
    };

    XMLHttpRequestPrototype.overrideMimeType = function(mimetype) {
        try {
            return this.__nativeObject.overrideMimeType(mimetype);
        } catch (e) {}
    };

    XMLHttpRequestPrototype.send = function(data) {
        try {
            return this.__nativeObject.send(data);
        } catch (e) {}
    };

    XMLHttpRequestPrototype.setRequestHeader = function(key, value) {
        try {
            return this.__nativeObject.setRequestHeader(key, value);
        } catch (e) {}
    };

    return XMLHttpRequest;
}


},
function(require, exports, module, global) {

var environment = require(28);


var Uint8Array = environment.window.Uint8Array || Array;


module.exports = toUint8Array;


function toUint8Array(str) {
    var length = str.length,
        ui8 = new Uint8Array(length),
        i = -1,
        il = length - 1;

    while (i++ < il) {
        ui8[i] = str.charCodeAt(i) & 0xff;
    }

    return ui8;
}


},
function(require, exports, module, global) {

var environment = require(28),
    emptyFunction = require(29),
    now = require(3);


var window = environment.window,
    requestAnimationFrame, lastTime;


window.requestAnimationFrame = (
    window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.oRequestAnimationFrame ||
    window.msRequestAnimationFrame
);

window.cancelRequestAnimationFrame = (
    window.cancelAnimationFrame ||
    window.cancelRequestAnimationFrame ||

    window.webkitCancelAnimationFrame ||
    window.webkitCancelRequestAnimationFrame ||

    window.mozCancelAnimationFrame ||
    window.mozCancelRequestAnimationFrame ||

    window.oCancelAnimationFrame ||
    window.oCancelRequestAnimationFrame ||

    window.msCancelAnimationFrame ||
    window.msCancelRequestAnimationFrame
);


if (window.requestAnimationFrame) {
    requestAnimationFrame = function requestAnimationFrame(callback, element) {
        return window.requestAnimationFrame(callback, element);
    };
} else {
    lastTime = 0;

    requestAnimationFrame = function requestAnimationFrame(callback) {
        var current = now(),
            timeToCall = Math.max(0, 16 - (current - lastTime)),
            id = global.setTimeout(
                function runCallback() {
                    callback(current + timeToCall);
                },
                timeToCall
            );

        lastTime = current + timeToCall;
        return id;
    };
}


if (window.cancelRequestAnimationFrame && window.requestAnimationFrame) {
    requestAnimationFrame.cancel = function(id) {
        return window.cancelRequestAnimationFrame(id);
    };
} else {
    requestAnimationFrame.cancel = function(id) {
        return global.clearTimeout(id);
    };
}


requestAnimationFrame(emptyFunction);


module.exports = requestAnimationFrame;


}], void 0, (new Function("return this;"))()));
